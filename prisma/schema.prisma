generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?
  avatar    String?
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedWorkspaces    Workspace[]       @relation("WorkspaceOwner")
  workspaceMemberships WorkspaceMember[]
  projectMemberships ProjectMember[]
  assignedTasks      Task[]            @relation("TaskAssignee")
  reportedTasks      Task[]            @relation("TaskReporter")
  comments           TaskComment[]
  timeEntries        TimeEntry[]
  attachments        TaskAttachment[]
  activityLogs       ActivityLog[]
  accounts           Account[]
  sessions           Session[]
  @@map("users")
  Project Project[]
  WorkspaceInvitation WorkspaceInvitation[]
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner     User               @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members   WorkspaceMember[]
  projects  Project[]
  invitations WorkspaceInvitation[]


  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}
model WorkspaceInvitation {
  id            String   @id @default(cuid())
  workspaceId   String
  email         String
  invitedById   String
  role          WorkspaceRole @default(MEMBER)
  token         String   @unique
  accepted      Boolean  @default(false)
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  // Relations
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedBy     User      @relation(fields: [invitedById], references: [id])

  @@unique([workspaceId, email])
  @@map("workspace_invitations")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  workspaceId String
  status      ProjectStatus @default(ACTIVE)
  priority    Priority      @default(MEDIUM)
  startDate   DateTime?
  dueDate     DateTime?
  createdBy   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator     User            @relation(fields: [createdBy], references: [id])
  members     ProjectMember[]
  tasks       Task[]
  activityLogs ActivityLog[]

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  assignedAt DateTime   @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}


model Task {
  id             String     @id @default(cuid())
  title          String
  description    String?
  projectId      String
  assigneeId     String?
  reporterId     String
  position       Int
  priority       Priority   @default(MEDIUM)
  status         TaskStatus @default(TODO)
  estimatedHours Decimal?   @db.Decimal(5, 2)
  actualHours    Decimal    @default(0) @db.Decimal(5, 2)
  startDate      DateTime?
  dueDate        DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?            @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  reporter    User             @relation("TaskReporter", fields: [reporterId], references: [id])
  comments    TaskComment[]
  timeEntries TimeEntry[]
  attachments TaskAttachment[]
  activityLogs ActivityLog[]

  @@map("tasks")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("task_comments")
}

model TimeEntry {
  id          String   @id @default(cuid())
  taskId      String
  userId      String
  description String?
  hours       Float 
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("time_entries")
}

model TaskAttachment {
  id         String   @id @default(cuid())
  taskId     String
  userId     String
  filename   String
  url        String
  fileSize   Int?
  mimeType   String?
  uploadedAt DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("task_attachments")
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  projectId   String
  taskId      String?
  action      String
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
}

// Enums
enum Role {
  ADMIN
  MANAGER
  MEMBER
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

enum ProjectRole {
  LEAD
  MEMBER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
} 